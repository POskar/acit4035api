#include <Arduino_Neuton.h>
#include <Arduino.h>
#include <Arduino_BHY2.h>
#include <ArduinoBLE.h>
#include <Nicla_System.h>
#include <LibPrintf.h>
#include <assert.h>
#include <BlockDevice.h>
#include <Dir.h>
#include <File.h>
#include <FileSystem.h>
#include <LittleFileSystem.h>
#include <String.h>

// ///////////////////////////////////////////////////////////////////////////

#define LED_TOGGLE_FREQUENCY_HZ         (5)
#define LED_TOGGLE_INTERVAL_MS          (1000 / LED_TOGGLE_FREQUENCY_HZ)

#define DATA_FREQUENCY_HZ               (100)
#define DATA_FEED_INTERVAL_MS           (1000 / DATA_FREQUENCY_HZ)
#define DATA_READ_INTERVAL              (30000)
#define SENSOR_DATA_LEN                 (6U)
#define OUTPUT_CLASSES_NUM              (5U)

#define RANDOM_CLASS                    (0U)
#define CLAPPING_CLASS                  (1U)
#define BRUSHING_TEETH_CLASS            (2U)
#define WASHING_HANDS_CLASS             (3U)
#define BRUSHING_HAIR_CLASS             (4U)

#define PREDICTION_POSTPROCESSING_ENABLED  1

#define HOP_MS                          (200)
#define AVG_TIME_MS                     (400)
#define OUTPUTS_NUM_FOR_AVERAGING       ((AVG_TIME_MS / HOP_MS) + (AVG_TIME_MS % HOP_MS ? 1 : 0))

//                                      RAND   CLAP   TEETH   HANDS   HAIR
#define THRESHOLDS                      0.50,  0.91,  0.85,   0.92,   0.85

#define BLE_SENSE_UUID(val) ("19b10000-" val "-537e-4f6c-d104768a1214")

// ///////////////////////////////////////////////////////////////////////////
// Function prototypes

static void ledIndication(neuton_u16_t predictedClass, unsigned long currentTime);
static void handlePrediction(neuton_u16_t predictedClass,
                            const neuton_output_t* probabilities, 
                            neuton_u16_t probabilitiesNum);
static void printPredictedClass(neuton_u16_t predictedClass,
                                neuton_output_t probability,
                                neuton_u16_t probabilitiesNum);
static const char* getClassName(neuton_u16_t classIndex);

#if PREDICTION_POSTPROCESSING_ENABLED
static void postprocessingInit(void);
static void postprocessingBufferRdyCallback(void* pWindow, neuton_u16_t windowSize,
                                            void* userCtx);
#endif


// ///////////////////////////////////////////////////////////////////////////
// Local variables

static neuton_sliding_window_ctx_t probabilitiesSlidingWindow;
static neuton_u16_t lastPredictedClass = RANDOM_CLASS;
constexpr auto userRoot{ "fs" };
constexpr auto filename{ "recognition.csv" };
static unsigned long previousSensorDataTime;
static unsigned long previousReadTime;
bool isConnected = false;
bool ongoingRead = false;
int maxSizeToSend = 510;
String csvLine = "";
String name;

mbed::BlockDevice* spif;
mbed::LittleFileSystem fs{ userRoot };

BLEService service(BLE_SENSE_UUID("0000"));
BLELongCharacteristic currentTimeCharacteristic(BLE_SENSE_UUID("1001"), BLERead);
BLEStringCharacteristic fileReadCharacteristic(BLE_SENSE_UUID("2001"), BLERead, 512);
BLEIntCharacteristic doneReadingCharacteristic(BLE_SENSE_UUID("3001"), BLEWrite);

Sensor temperature(SENSOR_ID_TEMP);
SensorXYZ accel(SENSOR_ID_ACC);
SensorXYZ gyro(SENSOR_ID_GYRO);

// ///////////////////////////////////////////////////////////////////////////

void setup() {
  // Initialize Nicla Board Support Package
  nicla::begin();
  nicla::leds.begin();
  nicla::leds.setColor(green);

  // Initialize Serial Port for debug info
  Serial.begin(115200);
  while (!Serial)
    ;

  // Initialize Flash Storage system
  Serial.print("\r\nLoading the SPI Flash Storage and LittleFS filesystem...");

  // Get core-wide instance of SPIF Block Device
  spif = mbed::BlockDevice::get_default_instance();
  spif->init();

  // Mount the filesystem
  int err = fs.mount(spif);
  if (err) {
    err = fs.reformat(spif);
    Serial.print("Error mounting file system: ");
    Serial.println(err);
    while (true)
      ;
  }
  Serial.println(" done.");

  // Initialize BHY Inertial Sensor Module
  BHY2.begin(NICLA_STANDALONE);
  accel.begin();
  gyro.begin();
  temperature.begin();

  // Initialize BLE
  Serial.print("Initialising BLE... ");
  if (!BLE.begin()) {
    Serial.println("Failed to initialized BLE!");

    while (1)
      ;
  }
  Serial.println("done.");

  String address = BLE.address();
  Serial.print("address = ");
  Serial.println(address);

  address.toUpperCase();

  name = "NiclaSenseME-";
  name += address[address.length() - 5];
  name += address[address.length() - 4];
  name += address[address.length() - 2];
  name += address[address.length() - 1];

  Serial.print("name = ");
  Serial.println(name);

  BLE.setLocalName(name.c_str());
  BLE.setDeviceName(name.c_str());
  BLE.setAdvertisedService(service);

  // Add all the previously defined Characteristics
  service.addCharacteristic(fileReadCharacteristic);
  service.addCharacteristic(currentTimeCharacteristic);
  service.addCharacteristic(doneReadingCharacteristic);

  // Sensors event handlers
  currentTimeCharacteristic.setEventHandler(BLERead, onTimeRead);
  fileReadCharacteristic.setEventHandler(BLERead, onFileRead);
  doneReadingCharacteristic.setEventHandler(BLEWritten, onDoneReading);

  // Disconnect event handler
  BLE.setEventHandler(BLEDisconnected, onDisconnected);

  // Advertise BLE connection
  BLE.addService(service);
  BLE.advertise();

  // Initilize timer
  previousSensorDataTime = millis();

  // Initialize Neuton NN library
  neuton_nn_setup();

  // Check Neuton model Input and Output parameters
  assert(SENSOR_DATA_LEN == neuton_nn_uniq_inputs_num());
  assert(OUTPUT_CLASSES_NUM == neuton_nn_model_outputs_num());

  // If PREDICTION_POSTPROCESSING_ENABLED option is enabled,
  // then all prediction will be stored OUTPUTS_NUM_FOR_AVERAGING times and averaged with using a sliding window,
  // and based on the maximum mean probability, a decision will be made on the current class
#if PREDICTION_POSTPROCESSING_ENABLED
  postprocessingInit();
#endif

  // Put in default value for file characteristic
  // TODO: use writeValue instead of setValue
  fileReadCharacteristic.setValue("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut malesuada pretium metus, eget faucibus dui consectetur id. Nam pretium vitae odio et aliquam. Nullam venenatis tincidunt mauris, vitae eleifend turpis lobortis accumsan. Mauris eget cursus elit. Donec tristique a nulla sit amet tincidunt. Pellentesque tempor ultricies libero non interdum. Donec vel accumsan massa, et mattis magna.");
  currentTimeCharacteristic.setValue(0);
}

// ///////////////////////////////////////////////////////////////////////////

void loop() {
  // Update function should be continuously polled
  BHY2.update();

  auto currentTime = millis();

  if (currentTime - previousSensorDataTime >= DATA_FEED_INTERVAL_MS) {
    previousSensorDataTime = currentTime;

    // Read & store sensor data into the feature vector for Neuton model processing,
    // the order of input features should be the same as it is used in training dataset
    neuton_input_t sensorData[SENSOR_DATA_LEN];

    sensorData[0] = accel.x();
    sensorData[1] = accel.y();
    sensorData[2] = accel.z();
    sensorData[3] = gyro.x();
    sensorData[4] = gyro.y();
    sensorData[5] = gyro.z();

    // Feed input sensor data to the Neuton preprocessing pipeline,
    // when data will be ready for feature extraction and inference
    // the output data pointer will be not NULL
    neuton_inference_input_t* input = neuton_nn_feed_inputs(sensorData, SENSOR_DATA_LEN);

    if (input != NULL) {
      neuton_u16_t predictedClass;
      const neuton_output_t* probabilities;

      // Run inference of the Neuton model, predicted class of activity will be defined,
      // number of output classes should be equal to number of classes in the model
      auto outputsNum = neuton_nn_run_inference(input, &predictedClass, &probabilities);

      if (outputsNum > 0) {
        // Handle prediction results with postprocessing or just print it
        handlePrediction(predictedClass, probabilities, outputsNum, currentTime);
      }
    }
  }

  if (currentTime - previousReadTime >= DATA_READ_INTERVAL) {
    previousReadTime = currentTime;
    mbed::File file;
    auto err = file.open(&fs, filename, O_RDONLY);
    if (err) {
      Serial.print("Error opening file for reading: ");
      Serial.println(err);
      return;
    } else {
      ongoingRead = true;

      printFile(file);
      file.close();

      ongoingRead = false;
    }
  }

  if (BLE.connected()) {
    isConnected = true;
  } else if (!isConnected) {
    // Update LED indication color based on current class of activity
    ledIndication(lastPredictedClass, currentTime);
    BLE.advertise();
  }
}

// ///////////////////////////////////////////////////////////////////////////

static void ledIndication(neuton_u16_t predictedClass, unsigned long currentTime) {
  static auto lastToggleTime = millis();
  static auto previosLedColor = off;

  if ((currentTime - lastToggleTime) >= LED_TOGGLE_INTERVAL_MS) {
    auto color = off;

    if (previosLedColor == off) {
      switch (predictedClass) {
        case RANDOM_CLASS: color = blue; break;
        case CLAPPING_CLASS: color = green; break;
        case BRUSHING_TEETH_CLASS: color = magenta; break;
        case WASHING_HANDS_CLASS: color = yellow; break;
        case BRUSHING_HAIR_CLASS: color = cyan; break;
        default: break;
      }
    }

    nicla::leds.setColor(color);

    previosLedColor = color;
    lastToggleTime = currentTime;
  }
}

// ///////////////////////////////////////////////////////////////////////////

static void handlePrediction(neuton_u16_t predictedClass, const neuton_output_t* probabilities, neuton_u16_t probabilitiesNum, unsigned long currentTime) {
  // Show predicted results
  // printPredictedClass(predictedClass, probabilities[predictedClass], probabilitiesNum);
  savePredictedClassToFile(predictedClass, probabilities[predictedClass], previousSensorDataTime, currentTime);
  // lastPredictedClass = predictedClass;
}

// ///////////////////////////////////////////////////////////////////////////

static void printPredictedClass(neuton_u16_t predictedClass, neuton_output_t probability, neuton_u16_t probabilitiesNum) {
// If PREDICTION_POSTPROCESSING_ENABLED check that the probability
// of the current activity exceeds the threshold necessary to indicate the result
#if PREDICTION_POSTPROCESSING_ENABLED
  static const neuton_output_t PROBABILITITES_THRESHOLDS[] = { THRESHOLDS };

  if (probability < PROBABILITITES_THRESHOLDS[predictedClass])
    return;
#endif

  lastPredictedClass = predictedClass;
  printf("%lu -> %s (%3u%%)\n", previousSensorDataTime, getClassName(predictedClass), (uint32_t)(probability * 100.0));
}

// ///////////////////////////////////////////////////////////////////////////

static void savePredictedClassToFile(neuton_u16_t predictedClass, neuton_output_t probability, unsigned long previousSensorDataTime, unsigned long currentTime) {
// If PREDICTION_POSTPROCESSING_ENABLED check that the probability
// of the current activity exceeds the threshold necessary to indicate the result
#if PREDICTION_POSTPROCESSING_ENABLED
  static const neuton_output_t PROBABILITITES_THRESHOLDS[] = { THRESHOLDS };

  if (probability < PROBABILITITES_THRESHOLDS[predictedClass])
    return;
#endif

  mbed::File file;
  auto err = file.open(&fs, filename, O_WRONLY | O_CREAT | O_APPEND);
  if (err) {
    Serial.print("Error opening file for writing: ");
    Serial.println(err);
    return;
  }

#pragma region "Saving when class changes"
  if (lastPredictedClass != predictedClass) {
    // Save to file only when we experience change of class
    lastPredictedClass = predictedClass;

    mbed::File file;
    auto err = file.open(&fs, filename, O_WRONLY | O_CREAT | O_APPEND);
    if (err) {
      Serial.print("Error opening file for writing: ");
      Serial.println(err);
      return;
    }

    csvLine += currentTime;
    csvLine += ";";

    if (!ongoingRead) {
      Serial.print("Saving data: ");
      Serial.println(csvLine);

      auto ret = file.write(csvLine.c_str(), csvLine.length());
      if (ret != csvLine.length()) {
        Serial.print("[ERROR] Error writing data: ");
        Serial.println(ret);
      }
      csvLine = "";
    } else {
      Serial.println("[ERROR] Cannot save now due to ongoing read of the file!");
    }

    // clearFile(file);

    file.close();

    csvLine += predictedClass;
    csvLine += ";";
    csvLine += currentTime;
    csvLine += ";";
  } else if (!csvLine.length() > 0) {
    csvLine += predictedClass;
    csvLine += ";";
    csvLine += currentTime;
    csvLine += ";";
  }
#pragma endregion
}

// ///////////////////////////////////////////////////////////////////////////

void printFile(mbed::File& file) {
  Serial.print("[");
  Serial.print(file.size());
  Serial.print(" bytes] ");
  // Read and print file len-bytes at time to preserve RAM
  constexpr size_t len{ 256 };

  size_t totalLen{ file.size() };

  while (totalLen > 0) {
    char buf[len]{};

    auto read = file.read(buf, len);
    totalLen -= read;
    for (const auto& c : buf)
      Serial.print(c);
  }
  Serial.println("");
}

// ///////////////////////////////////////////////////////////////////////////

String readFile(mbed::File& file) {
  nicla::leds.setColor(245, 150, 66);
  auto fileSize = file.size();
  String fullFile = "";

  char buf[512];
  auto read = file.read(buf, maxSizeToSend);
  file.close();
  if (fileSize > maxSizeToSend) {
    fullFile += "X;";  // read once again
  } else if (fileSize > 0) {
    fullFile += "Y;";  // done reading
  }
  fullFile += buf;

  return fullFile;
}

// ///////////////////////////////////////////////////////////////////////////

void substringFile(String fullFile) {
  if (fullFile.length() < 512) {
    return;
  }

  mbed::File file;
  auto err = file.open(&fs, filename, O_WRONLY);
  if (err) {
    Serial.print("Error opening file while reading: ");
    Serial.println(err);
  }

  auto fileSize = file.size();

  // clearFile(file);

  auto subString = getSubstring(fullFile, fileSize);

  Serial.print("[INFORMATION] Content of substring: ");
  Serial.println(subString);

  auto ret = file.write(subString.c_str(), subString.length());
  if (ret != subString.length()) {
    Serial.print("[ERROR] Error writing data: ");
    Serial.println(ret);
  } else {
    Serial.print("[INFORMATION] So now the file is left with ");
    Serial.print(file.size());
    Serial.println(" bytes.");
  }
  file.close();
}

// ///////////////////////////////////////////////////////////////////////////

String getSubstring(String input, int endIndex) {
  const char* inputAsChar = input.c_str();
  int inputLength = strlen(inputAsChar);

  Serial.print("[INFORMATION] inputLength: ");
  Serial.println(inputLength);
  Serial.print("[INFORMATION] endIndex: ");
  Serial.println(endIndex);

  // Check if the indices are valid
  if (inputLength < 0 || endIndex < inputLength) {
    Serial.println("[ERROR] Invalid indices");
    return input;
  }

  // Calculate the length of the substring
  int subStringLength = endIndex - inputLength + 1;

  // Create a character array to store the substring
  String subString;

  // Copy the characters from the input string to the substring
  for (int i = 0; i < subStringLength; i++) {
    subString += inputAsChar[inputLength + i];
  }

  return subString;
}

// ///////////////////////////////////////////////////////////////////////////

void clearFile(mbed::File& file) {
  file.truncate(0);
}

// ///////////////////////////////////////////////////////////////////////////

static const char* getClassName(neuton_u16_t classIndex) {
  switch (classIndex) {
    case RANDOM_CLASS: return "Random        ";
    case CLAPPING_CLASS: return "Clapping      ";
    case BRUSHING_TEETH_CLASS: return "Brushing Teeth";
    case WASHING_HANDS_CLASS: return "Washing Hands ";
    case BRUSHING_HAIR_CLASS: return "Brushing Hair ";
    default: return "Unknown       ";
  }
}

// ///////////////////////////////////////////////////////////////////////////

void onDisconnected(BLEDevice central) {
  Serial.println("Device disconnected");
  isConnected = false;
  BLE.advertise();
}

// ///////////////////////////////////////////////////////////////////////////

void onFileRead(BLEDevice central, BLECharacteristic characteristic) {
  mbed::File file;
  auto err = file.open(&fs, filename, O_RDONLY);
  if (err) {
    Serial.print("Error opening file while reading: ");
    Serial.println(err);
    return;
  }

  if (file.readable()) {
    ongoingRead = true;

    Serial.println("[OUTGOING] Sending data to another device!");
    String fileContent = readFile(file);
    fileReadCharacteristic.setValue(fileContent);
    file.close();
  } else {
    fileReadCharacteristic.setValue("");
    Serial.println("File is empty!");
  }
}

// ///////////////////////////////////////////////////////////////////////////

void onTimeRead(BLEDevice central, BLECharacteristic characteristic) {
  auto currentTime = previousSensorDataTime;
  currentTimeCharacteristic.writeValue(currentTime);
  Serial.print("[OUTGOING] Sending current time: ");
  Serial.println(currentTime);
}

// ///////////////////////////////////////////////////////////////////////////

void onDoneReading(BLEDevice central, BLECharacteristic characteristic) {
  Serial.print("[INCOMING] Getting data from another device: ");
  byte reading[4];
  int readingInt;

  currentTimeCharacteristic.readValue(reading, sizeof(reading));
  readingInt = (int)(reading);
  Serial.println(readingInt);

  mbed::File file;
  auto err = file.open(&fs, filename, O_RDONLY);
  if (err) {
    Serial.print("Error opening file while reading: ");
    Serial.println(err);
    return;
  }

  String fullFile = readFile(file);

  file.close();

  substringFile(fullFile);

  ongoingRead = false;
}

// ///////////////////////////////////////////////////////////////////////////

#if PREDICTION_POSTPROCESSING_ENABLED

static void postprocessingInit(void) {
  static constexpr size_t WINDOW_LEN = OUTPUT_CLASSES_NUM * OUTPUTS_NUM_FOR_AVERAGING;
  static neuton_output_t slidingWindowBuffer[WINDOW_LEN];

  auto slidingWindowHop = neuton_nn_model_outputs_num();
  auto slidingWindowSampleSize = sizeof(neuton_output_t);

  neuton_sliding_window_init(&probabilitiesSlidingWindow, (void*)slidingWindowBuffer, WINDOW_LEN, slidingWindowSampleSize, slidingWindowHop, postprocessingBufferRdyCallback, NULL);
}

// ///////////////////////////////////////////////////////////////////////////

static void postprocessingBufferRdyCallback(void* pWindow, neuton_u16_t windowSize, void* userCtx) {
  (void)userCtx;
  auto outputsNum = neuton_nn_model_outputs_num();
  uint16_t classIndex = 0;
  float maxProb = 0;

  for (size_t i = 0; i < outputsNum; i++) {
    const float* probWindow = (float*)pWindow + i;
    auto meanProb = neuton_dsp_mean_f32_s(probWindow, OUTPUTS_NUM_FOR_AVERAGING, outputsNum, NULL);

    if (meanProb > maxProb) {
      maxProb = meanProb;
      classIndex = i;
    }
  }

  printPredictedClass(classIndex, maxProb, outputsNum);
}

#endif  // #if PREDICTION_POSTPROCESSING_ENABLED

// ///////////////////////////////////////////////////////////////////////////